"""OpenNode CLI Template Download Menu"""

import datetime

class VzCfgProducer(object):	
    """OpenVZ CT configuration generator for OpenNode"""	
	
    # Private variables
    _refmem 		= 256 		# Reference UBC memory amount
    _defmem			= 256 		# Default guaranteed memory amount
    _defdisk		= 10 		# Default filesystem limit in GB
    _defcpus		= 1 		# Default nr. of cpus
    _defcpulimit 	= 50 		# Default CPU usage limit
    _defcpuunits 	= 1000 		# Default CPU priority
    _definodes		= 200000 	# Default nr. of filesystem inodes per 1GB
    _defquotatime	= 1800 		# Default quota burst time 
    
	
    def __init__(self, inputvars):
        """Initializing class object"""
        if len(inputvars[0]) == 0:    	
            self.mem = self._defmem
        else:
            self.mem = int(inputvars[0])
        if len(inputvars[1]) == 0:
            self.disk = self._defdisk
        else:
            self.disk = int(inputvars[1])
        if len(inputvars[2]) == 0:
            self.cpus = self._defcpus
        else:
            self.cpus = int(inputvars[2])
        if len(inputvars[3]) == 0:
            self.cpulimit = self._defcpulimit
        else:
            self.cpulimit = int(inputvars[3])


    def __get_max_ulong(self):
        """Get OS MAX_ULONG value"""
        # 64-bit OS
        max_ulong = 9223372036854775807
        return max_ulong
        
            
    def get_ubc_ref(self):
        """Get reference UBC parameters"""
        max_ulong = self.__get_max_ulong()
        ubc = {}
        # Primary UBC limits
        ubc['numproc'] 			= [240, 240]
        ubc['avnumproc'] 		= [180, 180]
        ubc['numtcpsock'] 		= [360, 360]
        ubc['numothersock'] 	= [360, 360]
        ubc['vmguarpages']		= [65536, max_ulong]
        # Secondary UBC limits
        ubc['kmemsize'] 		= [14372700, 14790164]
        ubc['tcpsndbuf'] 		= [1720320, 2703360]
        ubc['tcprcvbuf'] 		= [1720320, 2703360]
        ubc['othersockbuf'] 	= [1126080, 2097152]
        ubc['dgramrcvbuf'] 		= [262144, 262144]
        ubc['oomguarpages'] 	= [50714, max_ulong]
        ubc['privvmpages'] 		= [98304, 104448]  
        # Other UBC limits
        ubc['lockedpages'] 		= [256, 256]
        ubc['shmpages'] 		= [21504, 21504]
        ubc['physpages'] 		= [0, max_ulong] # NB! This parameter is accounting only! (read-only, no calculations)
        ubc['dcachesize'] 		= [3409920, 3624960]
        ubc['numfile'] 			= [9312, 9312]
        ubc['numflock'] 		= [188, 206]
        ubc['numpty'] 			= [16, 16]
        ubc['numsiginfo'] 		= [256, 256]
        ubc['numiptent'] 		= [128, 128]
        return ubc
        
        
    def get_ratio(self):
        """Get ratio between reference and desired memory parameter"""
        ratio = self.mem / float(self._refmem) 
        return ratio
        
        
    def ubc_calc(self, ratio, ubc):
        """Calculate new UBC parameters according to ratio"""
        max_ulong = self.__get_max_ulong()
        calc = {}
        for key, value in ubc.iteritems():
            if value[0] == max_ulong:
        	    bar = value[0]
            else:
        	    bar = int(value[0] * ratio)
            if value[1] == max_ulong:
        	    lim = value[1]
            else:
        	    lim = int(value[1] * ratio)
            calc[key] = [bar, lim]    
        return calc
        
        
    def disk_ubc_calc(self):
        """Calculate filesystem resource limits"""
        disk_ubc = {}
        disk_ubc['diskspace'] = [ (self.disk * 1024) * 1024, ((self.disk + 1) * 1024) * 1024 ]
        disk_ubc['diskinodes'] = [ self.disk * self._definodes, int(self.disk * self._definodes * 1.10) ]
        disk_ubc['quotatime'] = self._defquotatime
        return disk_ubc
        
        
    def cpu_ubc_calc(self):
        """Calculate CPU resource limits"""
        cpu_ubc = {}
        cpu_ubc['cpus'] = self.cpus
        cpu_ubc['cpulimit'] = self.cpulimit * self.cpus
        cpu_ubc['cpuunits'] = self._defcpuunits
        return cpu_ubc
        
    def get_cfg_header_section(self):
        """Output OpenVZ configuration file header section"""
        today = datetime.datetime.today() 
        out =  '#+--------------------------------------------------------------+\n'
        out += '#| CT configuration generated by OpenNode vzcfgcreator script \t|\n'
        out += '#+--------------------------------------------------------------+\n'
        out += '#| Input params were \t\t\t\t\t\t|\n'
        out += '#+--------------------------------------------------------------+\n'
        out += '#| MEMORY    : %sMB \t\t\t\t\t\t|\n' % self.mem
        out += '#| DISK      : %sGB \t\t\t\t\t\t|\n' % self.disk
        out += '#| CPUS      : %s \t\t\t\t\t\t|\n'   % self.cpus
        out += '#| CPULIMIT  : %s%s \t\t\t\t\t\t|\n' % (self.cpulimit,'%')
        out += '#+--------------------------------------------------------------+\n'      
        out += '#| Generated : %s \t\t\t|\n'   % today.ctime()
        out += '#+--------------------------------------------------------------+\n\n'
        return out
            
        
    def get_cfg_ubc_section(self, ubc):
        """Output valid OpenVZ configuration file UBC section"""
        out =  '# Primary UBC resource limits (in form of barrier:limit)\n'
        out += 'NUMPROC="' + str(ubc['numproc'][0]) + ':' + str(ubc['numproc'][1]) + '"\n'
        out += 'AVNUMPROC="' + str(ubc['avnumproc'][0]) + ':' + str(ubc['avnumproc'][1]) + '"\n'
        out += 'NUMTCPSOCK="' + str(ubc['numtcpsock'][0]) + ':' + str(ubc['numtcpsock'][1]) + '"\n'
        out += 'NUMOTHERSOCK="' + str(ubc['numothersock'][0]) + ':' + str(ubc['numothersock'][1]) + '"\n'
        out += 'VMGUARPAGES="' + str(ubc['vmguarpages'][0]) + ':' + str(ubc['vmguarpages'][1]) + '"\n\n' 
        out += '# Secondary UBC resource limits\n'
        out += 'KMEMSIZE="' + str(ubc['kmemsize'][0]) + ':' + str(ubc['kmemsize'][1]) + '"\n'
        out += 'TCPSNDBUF="' + str(ubc['tcpsndbuf'][0]) + ':' + str(ubc['tcpsndbuf'][1]) + '"\n'
        out += 'TCPRCVBUF="' + str(ubc['tcprcvbuf'][0]) + ':' + str(ubc['tcprcvbuf'][1]) + '"\n'
        out += 'OTHERSOCKBUF="' + str(ubc['othersockbuf'][0]) + ':' + str(ubc['othersockbuf'][1]) + '"\n'
        out += 'DGRAMRCVBUF="' + str(ubc['dgramrcvbuf'][0]) + ':' + str(ubc['dgramrcvbuf'][1]) + '"\n'
        out += 'OOMGUARPAGES="' + str(ubc['oomguarpages'][0]) + ':' + str(ubc['oomguarpages'][1]) + '"\n'
        out += 'PRIVVMPAGES="' + str(ubc['privvmpages'][0]) + ':' + str(ubc['privvmpages'][1]) + '"\n\n'
        out += '# Other UBC resource limits\n'
        out += 'LOCKEDPAGES="' + str(ubc['lockedpages'][0]) + ':' + str(ubc['lockedpages'][1]) + '"\n'
        out += 'SHMPAGES="' + str(ubc['shmpages'][0]) + ':' + str(ubc['shmpages'][1]) + '"\n'
        out += 'PHYSPAGES="' + str(ubc['physpages'][0]) + ':' + str(ubc['physpages'][1]) + '"\n'
        out += 'DCACHESIZE="' + str(ubc['dcachesize'][0]) + ':' + str(ubc['dcachesize'][1]) + '"\n'
        out += 'NUMFILE="' + str(ubc['numfile'][0]) + ':' + str(ubc['numfile'][1]) + '"\n'
        out += 'NUMFLOCK="' + str(ubc['numflock'][0]) + ':' + str(ubc['numflock'][1]) + '"\n'
        out += 'NUMPTY="' + str(ubc['numpty'][0]) + ':' + str(ubc['numpty'][1]) + '"\n'
        out += 'NUMSIGINFO="' + str(ubc['numsiginfo'][0]) + ':' + str(ubc['numsiginfo'][1]) + '"\n'
        out += 'NUMIPTENT="' + str(ubc['numiptent'][0]) + ':' + str(ubc['numiptent'][1]) + '"\n\n'
        return out
        
       
    def get_cfg_disk_section(self):
        """Output OpenVZ configuration file disk limits section"""
        ubc = self.disk_ubc_calc()
        out  = '# Filesystem resource limits\n'
        out += 'DISKSPACE="' + str(ubc['diskspace'][0]) + ':' + str(ubc['diskspace'][1]) + '"\n'
        out += 'DISKINODES="' + str(ubc['diskinodes'][0]) + ':' + str(ubc['diskinodes'][1]) + '"\n'
        out += 'QUOTATIME="' + str(ubc['quotatime']) + '"\n\n'
        return out
        
        
    def get_cfg_cpu_section(self):
        """Output OpenVZ configuration cpu limits section"""
        ubc = self.cpu_ubc_calc()
        out = '# CPU resource limits\n'
        out += 'CPUUNITS="' + str(ubc['cpuunits']) + '"\n'
        out += 'CPULIMIT="' + str(ubc['cpulimit']) + '"\n'
        out += 'CPUS="' + str(ubc['cpus']) + '"\n\n'
        return out
        
                
    def get_vzcfg_base(self):
        """Output OpenVZ configuration file"""
        header_section 		= self.get_cfg_header_section()
        ratio 				= self.get_ratio()
        ref_ubc 			= self.get_ubc_ref()
        ubc 				= self.ubc_calc(ratio, ref_ubc)
        ubc_section 		= self.get_cfg_ubc_section(ubc)
        disk_section 		= self.get_cfg_disk_section()
        cpu_section 		= self.get_cfg_cpu_section()
        out = header_section + ubc_section + disk_section + cpu_section
        return out
        
        
